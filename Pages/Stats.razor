@page "/stats"
@using Data
@inject GolfMemberService golfMemberService
@inject TeeTimeService teeTimeService
@inject IJSRuntime js


<h3>Statistics</h3>
<br />

<div class="row">
    <div class="col-lg-4 mr-5">
        <div class="row input-group">
            <div class="col-2">
                    <label class="form-label py-1">Query:</label>
            </div>
            <div class="col-3">
                    <select class="user-select-auto px-3 py-1" @onchange="QueryData">
                        <option selected value="1">Handicap golfers below 10</option>
                        <option value="2">Handicap golfers between 11 and 20</option>
                        <option value="3">Handicap golfers above 20</option>
                    </select>
            </div>
        </div>
        <br />
        <table class="table">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Handicap</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var member in queryList)
                    {
                    <tr>
                        <td>@member.FirstName @member.LastName</td> 
                        <td>@member.Handicap</td>
                    </tr>
                    }
            </tbody>
        </table>
    </div>
    <div class="col-lg-4 mx-5">
        <input type="text" id="memberName" placeholder="Type Member's' Name" list="memberDataList"/>
        <datalist id="memberDataList">
            @foreach(var member in allMembers)
            {
                <option data-value="@member.MemberID">@member.FirstName @member.LastName</option>
            }
        </datalist>
        <button class="btn btn-primary" @onclick="GetRounds">Get Rounds</button>
    </div>
</div>




@code {
    private List<GolfMember> allMembers, queryList;
    private int selectedMember;

    protected override async Task OnInitializedAsync()
    {
        allMembers = await golfMemberService.GetMembersAsync();
        queryList = allMembers.Where(x => x.Handicap < 10).ToList();
    }

    void QueryData(ChangeEventArgs e)
    {
        int index = Int32.Parse(e.Value.ToString());
        switch (index)
        {
            case 1:
                queryList = allMembers.Where(x => x.Handicap < 10).ToList();
                //OrderBy(s => s.Handicap).
                break;
            case 2:
                queryList = allMembers.Where(x => x.Handicap > 10 && x.Handicap <= 20).ToList();
                break;
            case 3:
                queryList = allMembers.Where(x => x.Handicap > 20).ToList();
                break;

        }
        StateHasChanged();
    }

    public async Task GetRounds()
    {
        await js.InvokeVoidAsync("alert", $@"{selectedMember}");
    }

}
