@page "/stats"
@using Data
@inject GolfMemberService golfMemberService
@inject TeeTimeService teeTimeService
@inject IJSRuntime js


<h3>Statistics</h3>
<br />

<div class="row">
    <div class="col-sm mr-5">
        <div class="row input-group">
            <div class="col">
                    <label class="col-form-label-lg py-1">Query:</label>
            </div>
            <div class="col">
                    <select class="form-select-lg px-3 py-1" @onchange="QueryData">
                        <option selected value="1">Handicap golfers below 10</option>
                        <option value="2">Handicap golfers between 11 and 20</option>
                        <option value="3">Handicap golfers above 20</option>
                    </select>
            </div>
        </div>
        <br />
        <table class="table">
            <thead>
                <tr>
                    <td><i class="@memberSort" onclick="@(() => MemberSorting("MemberName"))"/> Member</td>
                    <td><i class="@handicapSort" onclick="@(() => MemberSorting("Handicap"))" /> Handicap</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var member in queryList)
                    {
                    <tr>
                        <td>@member.FirstName @member.LastName</td> 
                        <td>@member.Handicap</td>
                    </tr>
                    }
            </tbody>
        </table>
    </div>
    <div class="col mx-5">
        <div class="row input-group">
            <div class="form-group p-1 m-1">
                <input class="form-control" type="text" placeholder="Filter Members"
                       @bind="filterMembers"
                       @bind:event="oninput">
            </div>
        </div>
        <br />
        <table class="table">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Handicap</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var member in roundList)
                    if (counter < 20)
                    {
                        {
                        if (!IsVisible(member))
                            continue;
                            <tr>
                                <td>@member.FirstName @member.LastName</td>
                                <td><a class="btn btn-success" href="members/teetimes/@member.MemberID">Get Round Times</a></td>
                            </tr>
                        }
                        counter++;
                    }
                    else
                    {
                        ResetCounter();
                        break;

                    }
            </tbody>
        </table>
    </div>

</div>




@code {
    private List<GolfMember> allMembers, queryList, roundList;
    protected string filterMembers { get; set; }
    int counter = 0;
    string memberSort = "bi bi-arrow-up";
    string handicapSort = "bi bi-arrow-down";
    bool sort = false;

    protected override async Task OnInitializedAsync()
    {
        allMembers = await golfMemberService.GetMembersAsync();
        queryList = allMembers.Where(x => x.Handicap < 10).ToList();
        roundList = allMembers;
    }

    void QueryData(ChangeEventArgs e)
    {
        int index = Int32.Parse(e.Value.ToString());
        switch (index)
        {
            case 1:
                queryList = allMembers.Where(x => x.Handicap < 10).ToList();
                //OrderBy(s => s.Handicap).
                break;
            case 2:
                queryList = allMembers.Where(x => x.Handicap > 10 && x.Handicap <= 20).ToList();
                break;
            case 3:
                queryList = allMembers.Where(x => x.Handicap > 20).ToList();
                break;

        }
        StateHasChanged();
    }

    public bool IsVisible(GolfMember filterMember)
    {
        if (string.IsNullOrEmpty(filterMembers))
            return true;

        if (filterMember.FullName.Contains(filterMembers, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    public void ResetCounter()
    {
        counter = 0;
    }

    protected void MemberSorting(string SortColumn)
    {
        if (!sort)
        {
            memberSort = "bi bi-arrow-down";
            handicapSort = "bi bi-arrow-up";

            sort = true;

            switch (SortColumn)
            {
                case "MemberName":
                    {
                        queryList = queryList.OrderBy(x => x.LastName).ToList();
                        break;
                    }
                case "Handicap":
                    {
                        queryList = queryList.OrderBy(x => x.Handicap).ToList();
                        break;
                    }
            }
        }
        else
        {
            memberSort = "bi bi-arrow-up";
            handicapSort = "bi bi-arrow-down";
            sort = false;

            switch (SortColumn)
            {
                case "MemberName":
                    {
                        queryList = queryList.OrderByDescending(x => x.LastName).ToList();
                        break;
                    }
                case "Handicap":
                    {
                        queryList = queryList.OrderByDescending(x => x.Handicap).ToList();
                        break;
                    }
            }
            
        }

    }

}
