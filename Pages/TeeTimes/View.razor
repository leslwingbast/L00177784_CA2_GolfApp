@page "/teetimes/view"
@page "/teetimes/view/{memberId:int}"
@using Data;
@inject TeeTimeService teeTimeService;
@inject GolfMemberService golfMemberService;
@inject NavigationManager navManager
@inject IJSRuntime js

<h3>Tee Times</h3>


@if (teeTimes.Count <= 0)
{
    <div class="row">
        <div class="form-group">
            <a class="btn btn-success" href="/teetimes/create"><i class="oi oi-plus"></i> Create New Round</a>
        </div>
    </div>

    <center>
        <p class="h3 col-lg-6">No rounds booked for this member, please choose another member or <a class="btn btn-success" href="/teetimes/create"><i class="oi oi-plus"></i> Create New</a></p>
        <div><img src="/images/nodata.gif"></div>
    </center>
}

else
{
    <div class="form-group">
        <a class="btn btn-success" href="/teetimes/create" title="Create a new Tee Time"><i class="oi oi-plus"></i> Create New</a>
    </div>
    <br />
    <table class="table">
        <thead>
            <tr class="fw-bold">
                <td>Date</td>
                <td>Tee Time</td>
                <td>Player Name</td>
                <td>Handicap</td>
                <td></td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @if(teeTimes.Count > 0)
            {
                @foreach (var eachtime in teeTimes)
                {
                 <tr class="align-middle">   
                    <td>@eachtime.RoundDate.ToShortDateString()</td>
                    <td>@eachtime.RoundHour:@eachtime.RoundMinute.ToString("D2")</td>
                    <td>@eachtime.Player1.FirstName @eachtime.Player1.LastName <br />@eachtime.Player2.FirstName @eachtime.Player2.LastName <br />@eachtime.Player3.FirstName @eachtime.Player3.LastName <br />@eachtime.Player4.FirstName @eachtime.Player4.LastName </td>
                    <td>@eachtime.Player1.Handicap <br />@eachtime.Player2.Handicap <br />@eachtime.Player3.Handicap <br />@eachtime.Player4.Handicap </td>
                    <td>
                        @if(@eachtime.RoundDate > DateTime.Now.Date)
                            {
                                <a class="btn btn-success mx-3 py-1" title="Edit this Tee time" href="teetimes/edit/@eachtime.Id">Edit</a>
                            }
                        else
                            {
                                <div class="btn btn-secondary mx-3 py-1" title="This Tee Times is in the past and can not be changed!">Edit</div>
                            }
                            
                            <button class="btn btn-danger mx-3 py-1" @onclick="@(() => DeleteTeeTime(eachtime))">Delete</button>
                    </td>
                </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int memberId { get; set; } = 0;

    private List<TeeTime> teeTimes;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await RefreshTeeTimes();
    }

    private async Task RefreshTeeTimes()
    {
        teeTimes = await teeTimeService.GetTeeTimesAsync();
        if (memberId != 0)
        {
            teeTimes = teeTimes.Where(x => x.Player1Id == memberId || x.Player2Id == memberId || x.Player3Id == memberId || x.Player4Id == memberId).ToList();
        }
        foreach(var teeTime in teeTimes)
        {
            teeTime.Player1 = golfMemberService.GetMember(teeTime.Player1Id);
            teeTime.Player2 = golfMemberService.GetMember(teeTime.Player2Id);
            teeTime.Player3 = golfMemberService.GetMember(teeTime.Player3Id);
            teeTime.Player4 = golfMemberService.GetMember(teeTime.Player4Id);
        }

    }

    private void AddNew()
    {
        navManager.NavigateTo("/teetimes/addteetime");
    }

    private async Task DeleteTeeTime(TeeTime delTeeTime)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Tee Time booked for {delTeeTime.RoundHour}:{delTeeTime.RoundMinute.ToString("D2")} on the {delTeeTime.RoundDate.ToShortDateString()}?");
        if (confirmed)
        {
            await teeTimeService.DeleteTeeTimeAsync(delTeeTime);
            await RefreshTeeTimes();
        }
    }
}
